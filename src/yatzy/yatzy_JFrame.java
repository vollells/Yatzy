/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yatzy;

import javax.swing.JOptionPane;

/**
 * klass som 채r yatzy
 * @author victorlells
 */
public class yatzy_JFrame extends javax.swing.JFrame {

    //medelemsvariabler
    private int N = 4;
    private int prevN;
    private int reRoll = 0;
    private int gameRound = 0;
    static int numPlayers = 0;
    static String playerName[]  = new String[4];
    private boolean discard = false;
    private boolean discardDice = false;
    private boolean firstRound = false;
    
    
    //Objekt
    dices_JPanel paint = new dices_JPanel();
    
    static newDice Dice[] = {new newDice(8),new newDice(102),new newDice(196),new newDice(290),new newDice(384)};
    
    newPlayer[] Player = {new newPlayer(playerName[0]), new newPlayer(playerName[1]), 
                    new newPlayer(playerName[2]),new newPlayer(playerName[3]) }; 
    
    
    /**
     * Creates new form yatzy_JFrame
     */
    public yatzy_JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txfBonus = new javax.swing.JTextField();
        txfPoang = new javax.swing.JTextField();
        lblPlayerName = new javax.swing.JLabel();
        lblTurn = new javax.swing.JLabel();
        lblEttPar = new javax.swing.JLabel();
        lblTvaPar = new javax.swing.JLabel();
        lblTriss = new javax.swing.JLabel();
        lblFyrtal = new javax.swing.JLabel();
        btnEttPar = new javax.swing.JButton();
        lblLitenStege = new javax.swing.JLabel();
        btnTvaPar = new javax.swing.JButton();
        lblStorStege = new javax.swing.JLabel();
        btnTriss = new javax.swing.JButton();
        lblKak = new javax.swing.JLabel();
        btnFyrtal = new javax.swing.JButton();
        lblChans = new javax.swing.JLabel();
        btnStorStege = new javax.swing.JButton();
        lblYatzyScore = new javax.swing.JLabel();
        btnLitenStege = new javax.swing.JButton();
        btnKak = new javax.swing.JButton();
        lblEttor = new javax.swing.JLabel();
        lblTvaor = new javax.swing.JLabel();
        btnChans = new javax.swing.JButton();
        lblTreor = new javax.swing.JLabel();
        btnYatzy = new javax.swing.JButton();
        lblFyror = new javax.swing.JLabel();
        btnEttor = new javax.swing.JButton();
        lblFemmor = new javax.swing.JLabel();
        btnTvaor = new javax.swing.JButton();
        lblSexor = new javax.swing.JLabel();
        btnTreor = new javax.swing.JButton();
        lblSumma = new javax.swing.JLabel();
        btnFyror = new javax.swing.JButton();
        lblBonus = new javax.swing.JLabel();
        btnFemmor = new javax.swing.JButton();
        lblPoang = new javax.swing.JLabel();
        btnSexor = new javax.swing.JButton();
        txfSumma = new javax.swing.JTextField();
        btnRullaTarn = new javax.swing.JButton();
        lblYatzy = new javax.swing.JLabel();
        dices_JPanel1 = new yatzy.dices_JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        txfBonus.setEditable(false);
        txfBonus.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        txfBonus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfBonus.setText("0");

        txfPoang.setEditable(false);
        txfPoang.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        txfPoang.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfPoang.setText("100");

        lblPlayerName.setFont(new java.awt.Font("Trattatello", 0, 18)); // NOI18N
        lblPlayerName.setText("Player 1 | 0 Rerrols Left");

        lblTurn.setFont(new java.awt.Font("Trattatello", 0, 18)); // NOI18N
        lblTurn.setText("Turn ");

        lblEttPar.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblEttPar.setText("Ett Par:");

        lblTvaPar.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblTvaPar.setText("Tv책 Par:");

        lblTriss.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblTriss.setText("Triss:");

        lblFyrtal.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblFyrtal.setText("Fyrtal:");

        btnEttPar.setFont(new java.awt.Font("Bernard MT Condensed", 0, 24)); // NOI18N
        btnEttPar.setText("0");
        btnEttPar.setEnabled(false);
        btnEttPar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEttParActionPerformed(evt);
            }
        });

        lblLitenStege.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblLitenStege.setText("l, Stege:");

        btnTvaPar.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnTvaPar.setText("0");
        btnTvaPar.setEnabled(false);
        btnTvaPar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvaParActionPerformed(evt);
            }
        });

        lblStorStege.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblStorStege.setText("S, Stege:");

        btnTriss.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnTriss.setText("0");
        btnTriss.setEnabled(false);
        btnTriss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrissActionPerformed(evt);
            }
        });

        lblKak.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblKak.setText("K책k:");

        btnFyrtal.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnFyrtal.setText("0");
        btnFyrtal.setEnabled(false);
        btnFyrtal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFyrtalActionPerformed(evt);
            }
        });

        lblChans.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblChans.setText("Chans:");

        btnStorStege.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnStorStege.setText("0");
        btnStorStege.setEnabled(false);
        btnStorStege.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStorStegeActionPerformed(evt);
            }
        });

        lblYatzyScore.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblYatzyScore.setText("Yatzy:");

        btnLitenStege.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnLitenStege.setText("0");
        btnLitenStege.setEnabled(false);
        btnLitenStege.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLitenStegeActionPerformed(evt);
            }
        });

        btnKak.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnKak.setText("0");
        btnKak.setEnabled(false);
        btnKak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKakActionPerformed(evt);
            }
        });

        lblEttor.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblEttor.setText("Ettor:");

        lblTvaor.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblTvaor.setText("Tv책or:");

        btnChans.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnChans.setText("0");
        btnChans.setEnabled(false);
        btnChans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChansActionPerformed(evt);
            }
        });

        lblTreor.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblTreor.setText("Treor:");

        btnYatzy.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnYatzy.setText("0");
        btnYatzy.setEnabled(false);
        btnYatzy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYatzyActionPerformed(evt);
            }
        });

        lblFyror.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblFyror.setText("Fyror:");

        btnEttor.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnEttor.setText("0");
        btnEttor.setEnabled(false);
        btnEttor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEttorActionPerformed(evt);
            }
        });

        lblFemmor.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblFemmor.setText("Femmor:");

        btnTvaor.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnTvaor.setText("0");
        btnTvaor.setEnabled(false);
        btnTvaor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvaorActionPerformed(evt);
            }
        });

        lblSexor.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblSexor.setText("Sexor:");

        btnTreor.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnTreor.setText("0");
        btnTreor.setEnabled(false);
        btnTreor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTreorActionPerformed(evt);
            }
        });

        lblSumma.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblSumma.setText("Summa:");

        btnFyror.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnFyror.setText("0");
        btnFyror.setEnabled(false);
        btnFyror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFyrorActionPerformed(evt);
            }
        });

        lblBonus.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblBonus.setText("Bonus:");

        btnFemmor.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnFemmor.setText("0");
        btnFemmor.setEnabled(false);
        btnFemmor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFemmorActionPerformed(evt);
            }
        });

        lblPoang.setFont(new java.awt.Font("Trattatello", 0, 24)); // NOI18N
        lblPoang.setText("Po채ng:");

        btnSexor.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnSexor.setText("0");
        btnSexor.setEnabled(false);
        btnSexor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSexorActionPerformed(evt);
            }
        });

        txfSumma.setEditable(false);
        txfSumma.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        txfSumma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfSumma.setText("0");

        btnRullaTarn.setFont(new java.awt.Font("Trattatello", 0, 42)); // NOI18N
        btnRullaTarn.setText("ROLL DICE");
        btnRullaTarn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRullaTarnActionPerformed(evt);
            }
        });

        lblYatzy.setFont(new java.awt.Font("Trattatello", 0, 36)); // NOI18N
        lblYatzy.setText("YATZY!");

        javax.swing.GroupLayout dices_JPanel1Layout = new javax.swing.GroupLayout(dices_JPanel1);
        dices_JPanel1.setLayout(dices_JPanel1Layout);
        dices_JPanel1Layout.setHorizontalGroup(
            dices_JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        dices_JPanel1Layout.setVerticalGroup(
            dices_JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRullaTarn, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblChans, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnChans, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblKak, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnKak, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblYatzyScore, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnYatzy, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblStorStege, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnStorStege, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblLitenStege, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnLitenStege, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblFyrtal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnFyrtal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblTriss, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnTriss, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblTvaPar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnTvaPar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblEttPar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnEttPar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txfBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblPoang, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfPoang, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSumma, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txfSumma, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblEttor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnEttor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblTvaor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnTvaor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblTreor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnTreor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblFyror, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnFyror, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblFemmor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnFemmor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSexor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSexor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(43, 43, 43))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPlayerName)
                    .addComponent(lblYatzy)
                    .addComponent(lblTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dices_JPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblYatzy, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(lblTurn)
                        .addGap(5, 5, 5)
                        .addComponent(lblPlayerName)
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(dices_JPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEttPar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEttPar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTvaPar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTvaPar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTriss, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTriss, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFyrtal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFyrtal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLitenStege, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLitenStege, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStorStege, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStorStege, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEttor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEttor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTvaor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTvaor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTreor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTreor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFyror, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFyror, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFemmor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFemmor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSexor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSexor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblKak, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnKak, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChans, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChans, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblYatzyScore, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnYatzy, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSumma, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfSumma, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txfPoang, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPoang, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnRullaTarn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /**
     * Metod som kontrollerar ifall det finns ett eller tv책 Par och ifall det 
     * finns tv책 returnerar den paret med det st철rsta v채rdet
     * @return trueOrFalse v채rdet f철r en av t채rningarna i paret
     */
     private int checkPar (){
        
        int trueOrFalse = 0; 
        boolean diceV1 = false;
        boolean diceV2 = false;
        int dice1 = 0;
        int dice2 = 0;
        int dice3 = 0;
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                if (Dice[i].getVarde() == Dice[j].getVarde() && i != j){
                    dice1 = i;
                    dice2 = j;
                    diceV1 = true;
                    break outerLoop;
                }
            }
        }
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                if (Dice[i].getVarde() == Dice[j].getVarde() && i != j && dice1 != i 
                                        && dice1 != j && dice2 != i  && dice2 != j)
                {
                    dice3 = i;
                    diceV2 = true;
                    break outerLoop;
                }
            }
        }
        
        if (diceV1 == true && diceV2 == true){ 
            if (Dice[dice1].getVarde() > Dice[dice3].getVarde()){
                trueOrFalse = Dice[dice1].getVarde();
            }else{
                trueOrFalse = Dice[dice3].getVarde();
            }   
        }else if(diceV1 == false && diceV2 == true){
            trueOrFalse = Dice[dice3].getVarde();
        }else if (diceV1 == true && diceV2 == false){
            trueOrFalse = Dice[dice1].getVarde();
        }
        return trueOrFalse;
    }
    
     /**
      * METOD som kontrollerar ifall det finns tv책 Par 
      * @return trueOrFalse v채rdet av en t채rning i b책da paren
      */
    private int checkTvaPar (){
        int trueOrFalse = 0; 
        boolean diceV1 = false;
        boolean diceV2 = false;
        int dice1 = 0;
        int dice2 = 0;
        int dice3 = 0;
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                if (Dice[i].getVarde() == Dice[j].getVarde() && i != j){
                    dice1 = i;
                    dice2 = j;
                    diceV1 = true;
                    break outerLoop;
                }
            }
        }
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                if (Dice[i].getVarde() == Dice[j].getVarde() && i != j && dice1 != i 
                                        && dice1 != j && dice2 != i  && dice2 != j)
                {
                    dice3 = i;
                    diceV2 = true;
                    break outerLoop;
                }
            }
        }
        if (diceV1 == true && diceV2 == true){ 
            trueOrFalse = Dice[dice1].getVarde() + Dice[dice3].getVarde();
        }
        return trueOrFalse;
    }
    
    /**
     * METOD som kontrollerar ifall det finns m철jligheten f철r triss
     * @return trueOrFalse v채rdet av en t채rningn i triss
     */
    private int checkTriss (){
        int trueOrFalse = 0; 
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                for(int k = 0; k <= 4; k++){
                    if (Dice[i].getVarde() == Dice[j].getVarde() && Dice[k].getVarde() == Dice[i].getVarde() 
                      && i != j && i != k && j != k){
                        trueOrFalse = Dice[i].getVarde();
                        break outerLoop;
                    }
                }
            }
        }
        
        return trueOrFalse;
    }
    
    /**
     * METOD som kontrollerar ifall det finns m철jligheten f철r Fyrtal
     * @return trueOrFalse v채rdet f철r en av t채rningarna i fyrtalet
     */
    private int checkFyrtal (){
        int trueOrFalse = 0; 
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                for(int k = 0; k <= 4; k++){
                    for(int l = 0; l <= 4; l++){
                        if (Dice[i].getVarde() == Dice[j].getVarde() && Dice[i].getVarde() == Dice[k].getVarde() 
                                && Dice[i].getVarde() == Dice[l].getVarde() && i != j && i != k && i != l && j != k
                                && j != l && k != l){
                            trueOrFalse = Dice[i].getVarde();
                            break outerLoop;
                        }
                    }
                }
            }
        }
        
        return trueOrFalse;
    }
    
    /**
     * METOD som kontrollerar ifall det finns m철jligheten f철r Liten Stege
     * @return trueOrFalse v채rdet f철r Liten Stege
     */
    private int checkLStege (){
        int trueOrFalse = 0; 
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            if(Dice[i].getVarde() == 1){
                for(int j = 0; j <= 4; j++){
                    if(Dice[j].getVarde() == 2){
                        for(int k = 0; k <= 4; k++){
                            if(Dice[k].getVarde() == 3){
                                for(int l = 0; l <= 4; l++){
                                    if(Dice[l].getVarde() == 4){
                                        for(int m = 0; m <= 4; m++){
                                            if(Dice[m].getVarde() == 5){
                                                trueOrFalse = 15;
                                                break outerLoop;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }   
        }
        
        return trueOrFalse;
    }
    
    /**
     * METOD som kontrollerar ifall det finns m철jligheten f철r Stor Stege
     * @return trueOrFalse v채rdet f철r StorStege
     */
    private int checkSStege (){
        int trueOrFalse = 0; 

        outerLoop:
        for(int i = 0; i <= 4; i++){
            if(Dice[i].getVarde() == 2){
                for(int j = 0; j <= 4; j++){
                    if(Dice[j].getVarde() == 3){
                        for(int k = 0; k <= 4; k++){
                            if(Dice[k].getVarde() == 4){
                                for(int l = 0; l <= 4; l++){
                                    if(Dice[l].getVarde() == 5){
                                        for(int m = 0; m <= 4; m++){
                                            if(Dice[m].getVarde() == 6){
                                                trueOrFalse = 20;
                                                break outerLoop;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }   
        }
        
        return trueOrFalse;
    }
    
    /**
     * METOD som kontrollerar ifall det finns m철jligheten f철r K책k
     * @return trueOrFalse v채rdet f철r en av t채rningarna i trissen och paret f철r k책k
     */
    private int checkKak (){
        
        boolean trueOrFalse1 = false; 
        boolean trueOrFalse2 = false;
        int trueOrFalse3 = 0;
        int dice1 = 0;
        int dice2 = 0;
        int dice3 = 0; 
        int dice4 = 0;
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                for(int k = 0; k <= 4; k++){
                    if (Dice[i].getVarde() == Dice[j].getVarde() && Dice[k].getVarde() == Dice[i].getVarde() 
                      && i != j && i != k && j != k){
                        dice1 = i;
                        dice2 = j;
                        dice3 = k;
                        trueOrFalse2 = true;
                        break outerLoop;
                    }
                }
            }
        }
        
        outerLoop:
        for(int i = 0; i <= 4; i++){
            for(int j = 0; j <= 4; j++){
                if (Dice[i].getVarde() == Dice[j].getVarde() && i != j && dice1 != i && dice1 != j
                        && dice2 != i && dice2 != j && dice3 != i && dice3 != j){
                    trueOrFalse1 = true;
                    dice4 = i;
                    break outerLoop;
                }
            }
        }
        
        if (trueOrFalse1 == true && trueOrFalse2 == true){
            trueOrFalse3 = (Dice[dice1].getVarde() * 3) + (Dice[dice4].getVarde()* 2);
        }
        return trueOrFalse3;
    }
    
    /**
     * METOD som kontrollerar ifall det finns m철jligheten f철r Yatzy
     * @return trueOrFalse v채rdet f철r en av t채rningarna i Yatzy
     */
    private int checkYatzy(){
        int trueOrFalse = 0;
            
        if (Dice[0].getVarde() == Dice[1].getVarde() && Dice[0].getVarde() == Dice[2].getVarde()
            && Dice[0].getVarde() == Dice[3].getVarde() && Dice[0].getVarde() == Dice[4].getVarde()){
            trueOrFalse = Dice[0].getVarde();
        }
        return trueOrFalse;
    }
    
    
    
    
   /**
    * Metod som s채tter alla btn till true ifall vissa konditions 채r uppfyllda
    */ 
    private void setTrue(){
        if(Player[N].isDiscardEtt() == false && Player[N].getEttor() == 0 ){
            btnEttor.setEnabled(true);
        }else{
            btnEttor.setEnabled(false);
        }
        if(Player[N].isDiscardTva() == false && Player[N].getTvaor() == 0 ){
            btnTvaor.setEnabled(true);
        }else{
            btnTvaor.setEnabled(false);
        }
        if(Player[N].isDiscardTre() == false && Player[N].getTreor() == 0 ){
            btnTreor.setEnabled(true);
        }else{
            btnTreor.setEnabled(false);
        }
        if(Player[N].isDiscardFyra() == false && Player[N].getFyror() == 0 ){
            btnFyror.setEnabled(true);
        }else{
            btnFyror.setEnabled(false);
        }
        if(Player[N].isDiscardFem() == false && Player[N].getFemmor() == 0 ){
            btnFemmor.setEnabled(true);
        }else{
            btnFemmor.setEnabled(false);
        }
        if(Player[N].isDiscardSex() == false && Player[N].getSexor() == 0 ){
            btnSexor.setEnabled(true);
        }else{
            btnSexor.setEnabled(false);
        }
        if(Player[N].isDiscardEttPar() == false && Player[N].getEttPar() == 0 ){
            btnEttPar.setEnabled(true);
        }else{
            btnEttPar.setEnabled(false);
        }
        if(Player[N].isDiscardTvaPar() == false && Player[N].getTvaPar() == 0 ){
            btnTvaPar.setEnabled(true);
        }else{
            btnTvaPar.setEnabled(false);
        }
        if(Player[N].isDiscardTriss() == false && Player[N].getTriss() == 0 ){
            btnTriss.setEnabled(true);
        }else{
            btnTriss.setEnabled(false);
        }
        if(Player[N].isDiscardFyrtal() == false && Player[N].getFyrtal() == 0 ){
            btnFyrtal.setEnabled(true);
        }else{
            btnFyrtal.setEnabled(false);
        }
        if(Player[N].isDiscardSStege() == false && Player[N].getStorStege() == 0 ){
            btnStorStege.setEnabled(true);
        }else{
            btnStorStege.setEnabled(false);
        }
        if(Player[N].isDiscardLStege() == false && Player[N].getLitenStege() == 0 ){
            btnLitenStege.setEnabled(true);
        }else{
            btnLitenStege.setEnabled(false);
        }
        if(Player[N].isDiscardKak() == false && Player[N].getKak() == 0 ){
            btnKak.setEnabled(true);
        }else{
            btnKak.setEnabled(false);
        }
        if(Player[N].isDiscardChans() == false && Player[N].getChans() == 0 ){
            btnChans.setEnabled(true);
        }else{
            btnChans.setEnabled(false);
        }
        if(Player[N].isDiscardYatzy() == false && Player[N].getYatzy() == 0 ){
            btnYatzy.setEnabled(true);
        }else{
            btnYatzy.setEnabled(false);
        }
        
    }
    
    /**
     * METOD som S채tter alla btn till FALSE 
     */
    private void setFalse(){
        
            btnEttor.setEnabled(false);
            btnTvaor.setEnabled(false);
            btnTreor.setEnabled(false);
            btnFyror.setEnabled(false);
            btnFemmor.setEnabled(false);
            btnSexor.setEnabled(false);
            btnEttPar.setEnabled(false);
            btnTvaPar.setEnabled(false);
            btnTriss.setEnabled(false);
            btnFyrtal.setEnabled(false);
            btnStorStege.setEnabled(false);
            btnLitenStege.setEnabled(false);
            btnKak.setEnabled(false);
            btnChans.setEnabled(false);
            btnYatzy.setEnabled(false);
            
    }
    
    /**
     * METOD som updaterar alla text-fields
     */
    private void updateScore(){
        
        txfSumma.setText(Integer.toString(Player[N].getEttor()+ Player[N].getTvaor()+  
        Player[N].getTreor()+ Player[N].getFyror()+  Player[N].getFemmor()+ Player[N].getSexor()));
        
        if( Integer.valueOf(txfSumma.getText()) >= 63)
        {
            txfBonus.setText("50");
        }
        
        txfPoang.setText(Integer.toString(Integer.valueOf(txfSumma.getText()) + Integer.valueOf(txfBonus.getText()) +
                Player[N].getEttPar() + Player[N].getTvaPar() + Player[N].getTriss() +
                Player[N].getFyrtal() + Player[N].getLitenStege() + Player[N].getStorStege() +
                Player[N].getKak() + Player[N].getChans() + Player[N].getYatzy()));
        
        Player[N].setFinalScore(Integer.valueOf(txfPoang.getText()));
    
    }
    
    /**
     * METOD som kontrollerar ifall en knapp ska vara 
     * Enabled beronde p책 olika varibler
     */
    private void checkDice(){
        for (int i = 0; i <= 4; i++){
            
            if (Player[N].isDiscardEtt() == true){
                btnEttor.setEnabled(false);
                btnEttor.setText("0");
            }else if(Player[N].getEttor() > 0){
                btnEttor.setEnabled(false);
                btnEttor.setText(Integer.toString(Player[N].getEttor()));
            }else if (Dice[i].getVarde() == 1){
                btnEttor.setEnabled(true);
                btnEttor.setText("0");
            }

            if (Player[N].isDiscardTva() == true){
                btnTvaor.setEnabled(false);
                btnTvaor.setText("0");
            }else if(Player[N].getTvaor() > 0){
                btnTvaor.setEnabled(false);
                btnTvaor.setText(Integer.toString(Player[N].getTvaor()));
            }else if (Dice[i].getVarde() == 2){
                btnTvaor.setEnabled(true);
                btnTvaor.setText("0");
            }
            

            if (Player[N].isDiscardTre() == true){
                btnTreor.setEnabled(false);
                btnTreor.setText("0");
            }else if(Player[N].getTreor() > 0){
                btnTreor.setEnabled(false);
                btnTreor.setText(Integer.toString(Player[N].getTreor()));
            }else if (Dice[i].getVarde() == 3){
                btnTreor.setEnabled(true);
                btnTreor.setText("0");
            }
            
            if (Player[N].isDiscardFyra() == true){
                btnFyror.setEnabled(false);
                btnFyror.setText("0");
            }else if(Player[N].getFyror() > 0){
                btnFyror.setEnabled(false);
                btnFyror.setText(Integer.toString(Player[N].getFyror()));
            }else if (Dice[i].getVarde() == 4){
                btnFyror.setEnabled(true);
                btnFyror.setText("0");
            }
            
            if (Player[N].isDiscardFem() == true){
                btnFemmor.setEnabled(false);
                btnFemmor.setText("0");
            }else if(Player[N].getFemmor() > 0){
                btnFemmor.setEnabled(false);
                btnFemmor.setText(Integer.toString(Player[N].getFemmor()));
            }else if (Dice[i].getVarde() == 5){
                btnFemmor.setEnabled(true);
                btnFemmor.setText("0");
            }
            
            if (Player[N].isDiscardSex() == true){
                btnSexor.setEnabled(false);
                btnSexor.setText("0");
            }else if(Player[N].getSexor() > 0){
                btnSexor.setEnabled(false);
                btnSexor.setText(Integer.toString(Player[N].getSexor()));
            }else if (Dice[i].getVarde() == 6){
                btnSexor.setEnabled(true);
                btnSexor.setText("0");
            }

        }
        if (Player[N].isDiscardEttPar() == true){
            btnEttPar.setEnabled(false);
            btnEttPar.setText("0");
        }else if(Player[N].getEttPar() > 0){
            btnEttPar.setEnabled(false);
            btnEttPar.setText(Integer.toString(Player[N].getEttPar()));
        }else if(checkPar() > 0){
            btnEttPar.setEnabled(true);
            btnEttPar.setText("0");
        }else{
            btnEttPar.setEnabled(false);
            btnEttPar.setText("0");
        }
        
        if (Player[N].isDiscardTvaPar() == true){
            btnTvaPar.setEnabled(false);
            btnTvaPar.setText("0");
        }else if(Player[N].getTvaPar() > 0){
            btnTvaPar.setEnabled(false);
            btnTvaPar.setText(Integer.toString(Player[N].getTvaPar()));
        }else if (checkTvaPar() > 0){
            btnTvaPar.setEnabled(true);
            btnTvaPar.setText("0");
        }else{
            btnTvaPar.setEnabled(false);
            btnTvaPar.setText("0");
        }
        
        if (Player[N].isDiscardTriss() == true){
            btnTriss.setEnabled(false);
            btnTriss.setText("0");
        }else if(Player[N].getTriss() > 0){
            btnTriss.setEnabled(false);
            btnTriss.setText(Integer.toString(Player[N].getTriss()));
        }else if (checkTriss() > 0){
            btnTriss.setEnabled(true);
            btnTriss.setText("0");
        }else{
            btnTriss.setEnabled(false);
            btnTriss.setText("0");
        }
        
        if (Player[N].isDiscardFyrtal() == true){
            btnFyrtal.setEnabled(false);
            btnFyrtal.setText("0");
        }else if(Player[N].getFyrtal() > 0){
            btnFyrtal.setEnabled(false);
            btnFyrtal.setText(Integer.toString(Player[N].getFyrtal()));
        }else if (checkFyrtal() > 0){
            btnFyrtal.setEnabled(true);
            btnFyrtal.setText("0");
        }else{
            btnFyrtal.setEnabled(false);
            btnFyrtal.setText("0");
        }
        
        if (Player[N].isDiscardLStege() == true){
            btnLitenStege.setEnabled(false);
            btnLitenStege.setText("0");
        }else if(Player[N].getLitenStege() > 0){
            btnLitenStege.setEnabled(false);
            btnLitenStege.setText(Integer.toString(Player[N].getLitenStege()));
        }else if (checkLStege() > 0){
            btnLitenStege.setEnabled(true);
            btnLitenStege.setText("0");
        }else{
            btnLitenStege.setEnabled(false);
            btnLitenStege.setText("0");
        }
        
        if (Player[N].isDiscardSStege() == true){
            btnStorStege.setEnabled(false);
            btnStorStege.setText("0");
        }else if(Player[N].getStorStege() > 0){
            btnStorStege.setEnabled(false);
            btnStorStege.setText(Integer.toString(Player[N].getStorStege()));
        }else if (checkSStege() > 0){
            btnStorStege.setEnabled(true);
            btnStorStege.setText("0");
        }else{
            btnStorStege.setEnabled(false);
            btnStorStege.setText("0");
        }
        
        if (Player[N].isDiscardKak() == true){
            btnKak.setEnabled(false);
            btnKak.setText("0");
        }else if(Player[N].getKak() > 0){
            btnKak.setEnabled(false);
            btnKak.setText(Integer.toString(Player[N].getKak()));
        }else if (checkKak() > 0){
            btnKak.setEnabled(true);
            btnKak.setText("0");
        }else{
            btnKak.setEnabled(false);
            btnKak.setText("0");
        }
        
        if (Player[N].isDiscardChans() == true){
            btnChans.setEnabled(false);
            btnChans.setText("0");
        }else if(Player[N].getChans() > 0){
            btnChans.setEnabled(false);
            btnChans.setText(Integer.toString(Player[N].getChans()));
        }else{
            btnChans.setEnabled(true);
            btnChans.setText("0");
        }
        
        if (Player[N].isDiscardYatzy() == true){
            btnYatzy.setEnabled(false);
            btnYatzy.setText("0");
        }else if(Player[N].getYatzy() > 0){
            btnYatzy.setEnabled(false);
            btnYatzy.setText(Integer.toString(Player[N].getYatzy()));
        }else if (checkYatzy() > 0){
            btnYatzy.setEnabled(true);
            btnYatzy.setText("0");
        }else{
            btnYatzy.setEnabled(false);
            btnYatzy.setText("0");
        }
        

    
    }
    
    /**
     * Metpd som kontrollerar fl철det av spelet och flera andra diverse saker
     */
    private void btnRullaTarn(){
        /**
         * Ifall reRoll har olika v채rden kan antingen rundan 철ka eller 
         * vilken spelare som 채r aktiv 
         */
        if(reRoll == 0){ 
            
            if(discard && firstRound){
                
                JOptionPane.showMessageDialog(null, "Please Discard a Field ", "Discard!",
                    JOptionPane.INFORMATION_MESSAGE);
                setTrue();
                discardDice = true;
             
            
            }else{
                firstRound = true;
                prevN = N;

                if (N < numPlayers){
                    N++; 
                }else if (N >= numPlayers){
                    N = 0;
                    gameRound++;
                    lblTurn.setText("Turn " + gameRound);
                }

                if(gameRound >= 16){
                    
                    calcScore();
                    System.out.println(numPlayers);
                    for (int i = 0; i <= numPlayers; i++) {
                        Scores_JFrame.playerName[i] = Player[i].getNamn();
                    }

                    for(int i = 0; i <= numPlayers ; i++){
                        Scores_JFrame.playerScore[i] = Player[i].getFinalScore();
                    }
                    
                    Scores_JFrame.numPlayers = numPlayers;
                    new Scores_JFrame().setVisible(true); 
                    setVisible(false);
                }


                for (int i = 0; i <= 4 ; i++){
                    if(Dice[i].getReroll() == false){
                        Dice[i].setReroll();
                    }
                }
            
                setFalse();
                updateScore();

            
                for (int i= 0; i<=4 ; i++){
                    Dice[i].setVarde();
                
                }
                checkDice();
            
                reRoll = 2;
                lblPlayerName.setText(Player[N].getNamn()+" | 2 Rerolls left");
                
                
            }
            

        /**
         * Ifall reRoll 채r st철rre 채n 0 borde den reRolla alla t채rningar som har inte har vlats
         */
        }else if(reRoll>0){
            
            for (int i = 0 ; i <= 4; i++){
                if(Dice[i].getReroll()){
                    Dice[i].setVarde();
                }
            }
            
            setFalse();
            checkDice();
            
            reRoll -= 1;
            if(reRoll ==  0){
                
            }
            lblPlayerName.setText( Player[N].getNamn() +" | 0 Rerolls left");
        }        
        if(reRoll == 1){
           
            lblPlayerName.setText( Player[N].getNamn() +" | 1 Rerolls left");
        
        }
        repaint();
        discard = true;
    }
    
    /**
     * Metod som r채knar ut hur m책nga po채ng en spelare har i slutet av spelet
     */
    private void calcScore(){
        
        
        for (int i = 0; i < numPlayers; i++) {
            newPlayer temp = Player[i + 1];

            while (i >= 0 && Player[i].getFinalScore() > temp.getFinalScore()){
                Player[i + 1] = Player[i];
                i--;
            }

            Player[i + 1] = temp;
        }

    
    }
    
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnEttParActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEttParActionPerformed
        if(discardDice){
            Player[N].setDiscardEttPar(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            int varde = checkPar();
            Player[N].setEttPar(varde * 2);
            btnEttPar.setText(Integer.toString(Player[N].getEttPar()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnEttParActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnTvaParActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvaParActionPerformed
        if(discardDice){
            Player[N].setDiscardTvaPar(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            int varde = checkTvaPar();
            Player[N].setTvaPar(varde * 2);
            btnTvaPar.setText(Integer.toString(Player[N].getTvaPar()));

            updateScore();
            setFalse();

            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnTvaParActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnTrissActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrissActionPerformed
        if(discardDice){
            Player[N].setDiscardTriss(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            int varde = checkTriss();
            Player[N].setTriss(varde * 3);
            btnTriss.setText(Integer.toString(Player[N].getTriss()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnTrissActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnFyrtalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFyrtalActionPerformed
        if(discardDice){
            Player[N].setDiscardFyrtal(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            int varde = checkFyrtal();
            Player[N].setFyrtal(varde * 4);
            btnFyrtal.setText(Integer.toString(Player[N].getFyrtal()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnFyrtalActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnStorStegeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStorStegeActionPerformed
        if(discardDice){
            Player[N].setDiscardSStege(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            Player[N].setStorStege(20);
            btnStorStege.setText(Integer.toString(Player[N].getStorStege()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnStorStegeActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnLitenStegeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLitenStegeActionPerformed
        if(discardDice){
            Player[N].setDiscardLStege(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            Player[N].setLitenStege(15);
            btnLitenStege.setText(Integer.toString(Player[N].getLitenStege()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnLitenStegeActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnKakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKakActionPerformed
        if(discardDice){
            Player[N].setDiscardKak(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{
            Player[N].setKak(checkKak());
            btnKak.setText(Integer.toString(Player[N].getKak()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnKakActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnChansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChansActionPerformed
        if(discardDice){
            Player[N].setDiscardChans(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            int varde = 0;

            for(int i = 0; i <= 4; i++){
                varde += Dice[i].getVarde();
            }

            Player[N].setChans(varde);
            btnChans.setText(Integer.toString(Player[N].getChans()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }

    }//GEN-LAST:event_btnChansActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnYatzyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYatzyActionPerformed
        if(discardDice){
            Player[N].setDiscardYatzy(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            Player[N].setYatzy(checkYatzy() * 5);
            btnYatzy.setText(Integer.toString(Player[N].getYatzy()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnYatzyActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnEttorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEttorActionPerformed
        if(discardDice){
            Player[N].setDiscardEtt(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            for (int i = 0; i <=4; i++){
                if(Dice[i].getVarde() == 1){
                    Player[N].setEttor(Player[N].getEttor() + 1);
                    btnEttor.setEnabled(false);
                }
            }
            btnEttor.setText(Integer.toString(Player[N].getEttor()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnEttorActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnTvaorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvaorActionPerformed
        if(discardDice){
            Player[N].setDiscardTva(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            for (int i = 0; i <=4; i++){
                if(Dice[i].getVarde() == 2){
                    Player[N].setTvaor(Player[N].getTvaor() + 2);
                }
            }
            checkDice();
            btnTvaor.setText(Integer.toString(Player[N].getTvaor()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }

    }//GEN-LAST:event_btnTvaorActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnTreorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTreorActionPerformed

        if(discardDice){
            Player[N].setDiscardTre(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            for (int i = 0; i <=4; i++){
                if(Dice[i].getVarde() == 3){
                    Player[N].setTreor(Player[N].getTreor() + 3);
                }
            }
            checkDice();
            btnTreor.setText(Integer.toString(Player[N].getTreor()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }

    }//GEN-LAST:event_btnTreorActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnFyrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFyrorActionPerformed
        if(discardDice){
            Player[N].setDiscardFyra(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            for (int i = 0; i <=4; i++){
                if(Dice[i].getVarde() == 4){
                    Player[N].setFyror(Player[N].getFyror() + 4);
                }
            }
            checkDice();
            btnFyror.setText(Integer.toString(Player[N].getFyror()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnFyrorActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnFemmorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFemmorActionPerformed
        if(discardDice){
            Player[N].setDiscardFem(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            for (int i = 0; i <=4; i++){
                if(Dice[i].getVarde() == 5){
                    Player[N].setFemmor(Player[N].getFemmor() + 5);
                }
            }
            checkDice();
            btnFemmor.setText(Integer.toString(Player[N].getFemmor()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }

    }//GEN-LAST:event_btnFemmorActionPerformed
    /**
     * Metod som anv채nder olika varibler och metoder f철r att 
     * avag철ra hur m책nga po채ng du ska f책 ifall du klickar p책 knappen
     * @param evt 
     */
    private void btnSexorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSexorActionPerformed

        if(discardDice){
            Player[N].setDiscardSex(true);
            updateScore();
            setFalse();
            discard = false;
            discardDice = false;
        }else{

            for (int i = 0; i <=4; i++){
                if(Dice[i].getVarde() == 6){
                    Player[N].setSexor(Player[N].getSexor() + 6);
                }
            }
            checkDice();
            btnSexor.setText(Integer.toString(Player[N].getSexor()));
            updateScore();
            setFalse();
            reRoll = 0;
            discard = false;
        }
    }//GEN-LAST:event_btnSexorActionPerformed
    /**
     * Metod som leder till btnRullaTarn
     * @param evt 
     */
    private void btnRullaTarnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRullaTarnActionPerformed
        btnRullaTarn();
    }//GEN-LAST:event_btnRullaTarnActionPerformed
    /**
     * Metod som kontrollerar ifall du klickar p책 t채rningarna
     * @param evt 
     */
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(evt.getY() > 40 && evt.getY() < 126){
            for (int i = 0; i <= 4; i++){
                if(evt.getX() > Dice[i].getX() + 186 && evt.getX() < (Dice[i].getX() + 280)){
                    Dice[i].setReroll();
                }
            }
        }
        repaint();
    }//GEN-LAST:event_formMouseClicked
    /**
     * Metod som kontrollerar ifall du trycker p책 space eller enter
     * @param evt 
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == 32 || evt.getKeyCode() == 13){
            btnRullaTarn();
        }
    }//GEN-LAST:event_formKeyPressed
    

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(yatzy_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(yatzy_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(yatzy_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(yatzy_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainPage_JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChans;
    private javax.swing.JButton btnEttPar;
    private javax.swing.JButton btnEttor;
    private javax.swing.JButton btnFemmor;
    private javax.swing.JButton btnFyror;
    private javax.swing.JButton btnFyrtal;
    private javax.swing.JButton btnKak;
    private javax.swing.JButton btnLitenStege;
    private javax.swing.JButton btnRullaTarn;
    private javax.swing.JButton btnSexor;
    private javax.swing.JButton btnStorStege;
    private javax.swing.JButton btnTreor;
    private javax.swing.JButton btnTriss;
    private javax.swing.JButton btnTvaPar;
    private javax.swing.JButton btnTvaor;
    private javax.swing.JButton btnYatzy;
    private yatzy.dices_JPanel dices_JPanel1;
    private javax.swing.JLabel lblBonus;
    private javax.swing.JLabel lblChans;
    private javax.swing.JLabel lblEttPar;
    private javax.swing.JLabel lblEttor;
    private javax.swing.JLabel lblFemmor;
    private javax.swing.JLabel lblFyror;
    private javax.swing.JLabel lblFyrtal;
    private javax.swing.JLabel lblKak;
    private javax.swing.JLabel lblLitenStege;
    private javax.swing.JLabel lblPlayerName;
    private javax.swing.JLabel lblPoang;
    private javax.swing.JLabel lblSexor;
    private javax.swing.JLabel lblStorStege;
    private javax.swing.JLabel lblSumma;
    private javax.swing.JLabel lblTreor;
    private javax.swing.JLabel lblTriss;
    private javax.swing.JLabel lblTurn;
    private javax.swing.JLabel lblTvaPar;
    private javax.swing.JLabel lblTvaor;
    private javax.swing.JLabel lblYatzy;
    private javax.swing.JLabel lblYatzyScore;
    private javax.swing.JTextField txfBonus;
    private javax.swing.JTextField txfPoang;
    private javax.swing.JTextField txfSumma;
    // End of variables declaration//GEN-END:variables
}
